{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk'; // ステート初期値\n\nvar initial = {\n  message: 'START',\n  data: [],\n  number: [],\n  result: 0\n}; // レデューサー\n\nfunction calcReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // 計算実行\n    case 'ENTER':\n      var data2 = state.data.slice();\n      var s = action.value;\n      data2.unshift(s);\n      var num = s.replace(/[^0-9]/g, \"\");\n      var number2 = state.number.slice();\n      number2.unshift(num);\n      var result = state.result * 1 + num * 1;\n      return {\n        message: 'ENTER',\n        data: data2,\n        number: number2,\n        result: result\n      };\n    // リセット\n\n    case 'RESET':\n      return {\n        message: 'RESET',\n        data: [],\n        number: [],\n        result: 0\n      };\n    // デフォルト\n\n    default:\n      return state;\n  }\n} // initStore関数\n\n\nexport function initStore() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  return createStore(calcReducer, state, applyMiddleware(thunkMiddleware));\n} // import { createStore, applyMiddleware } from 'redux';\n// import thunkMiddleware from 'redux-thunk';\n// // ステート初期値\n// const initial = {\n// \tmessage: 'START',\n// \tcount:0\n// }\n// // レデューサー\n// function counterReducer(state = initial, action) {\n// \tswitch (action.type) {\n// \t\tcase 'INCREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'INCREMENT',\n// \t\t\t\tcount: state.count + 1\n// \t\t\t};\n// \t\tcase 'DECREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'DECREMENT',\n// \t\t\t\tcount: state.count - 1\n// \t\t\t};\n// \t\tcase 'RESET':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'RESET',\n// \t\t\t\tcount: initial.count\n// \t\t\t};\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// }\n// // initStore関数(redux-store.jsで必要)\n// export function initStore(state = initial) {\n// \treturn createStore(counterReducer, state,\n// \tapplyMiddleware(thunkMiddleware))\n// }","map":{"version":3,"sources":["/Users/user/workspace/javascript/react/next_app/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","initial","message","data","number","result","calcReducer","state","action","type","data2","slice","s","value","unshift","num","replace","number2","initStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B,C,CAEA;;AACA,IAAMC,OAAO,GAAG;AACfC,EAAAA,OAAO,EAAE,OADM;AAEfC,EAAAA,IAAI,EAAE,EAFS;AAGfC,EAAAA,MAAM,EAAE,EAHO;AAIfC,EAAAA,MAAM,EAAC;AAJQ,CAAhB,C,CAOA;;AACA,SAASC,WAAT,GAA8C;AAAA,MAAzBC,KAAyB,uEAAjBN,OAAiB;AAAA,MAARO,MAAQ;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAK,OAAL;AACC,UAAIC,KAAK,GAAGH,KAAK,CAACJ,IAAN,CAAWQ,KAAX,EAAZ;AACA,UAAIC,CAAC,GAAGJ,MAAM,CAACK,KAAf;AACAH,MAAAA,KAAK,CAACI,OAAN,CAAcF,CAAd;AACA,UAAIG,GAAG,GAAGH,CAAC,CAACI,OAAF,CAAU,SAAV,EAAqB,EAArB,CAAV;AACA,UAAIC,OAAO,GAAGV,KAAK,CAACH,MAAN,CAAaO,KAAb,EAAd;AACAM,MAAAA,OAAO,CAACH,OAAR,CAAgBC,GAAhB;AACA,UAAIV,MAAM,GAAIE,KAAK,CAACF,MAAN,GAAe,CAAhB,GAAsBU,GAAG,GAAG,CAAzC;AACA,aAAO;AACNb,QAAAA,OAAO,EAAE,OADH;AAENC,QAAAA,IAAI,EAAEO,KAFA;AAGNN,QAAAA,MAAM,EAAEa,OAHF;AAINZ,QAAAA,MAAM,EAAEA;AAJF,OAAP;AAMD;;AACA,SAAK,OAAL;AACC,aAAO;AACNH,QAAAA,OAAO,EAAE,OADH;AAENC,QAAAA,IAAI,EAAE,EAFA;AAGNC,QAAAA,MAAM,EAAE,EAHF;AAINC,QAAAA,MAAM,EAAE;AAJF,OAAP;AAMD;;AACA;AACC,aAAOE,KAAP;AA1BF;AA4BA,C,CAED;;;AACA,OAAO,SAASW,SAAT,GAAoC;AAAA,MAAjBX,KAAiB,uEAATN,OAAS;AAC1C,SAAOH,WAAW,CAACQ,WAAD,EAAcC,KAAd,EAClBR,eAAe,CAACC,eAAD,CADG,CAAlB;AAEA,C,CAID;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\n// ステート初期値\nconst initial = {\n\tmessage: 'START',\n\tdata: [],\n\tnumber: [],\n\tresult:0\n}\n\n// レデューサー\nfunction calcReducer(state = initial, action) {\n\tswitch (action.type) {\n\t\t// 計算実行\n\t\tcase 'ENTER':\n\t\t\tlet data2 = state.data.slice();\n\t\t\tlet s = action.value;\n\t\t\tdata2.unshift(s);\n\t\t\tlet num = s.replace(/[^0-9]/g, \"\");\n\t\t\tlet number2 = state.number.slice();\n\t\t\tnumber2.unshift(num);\n\t\t\tlet result = (state.result * 1) + (num * 1);\n\t\t\treturn {\n\t\t\t\tmessage: 'ENTER',\n\t\t\t\tdata: data2,\n\t\t\t\tnumber: number2,\n\t\t\t\tresult: result\n\t\t\t};\n\t\t// リセット\n\t\tcase 'RESET':\n\t\t\treturn {\n\t\t\t\tmessage: 'RESET',\n\t\t\t\tdata: [],\n\t\t\t\tnumber: [],\n\t\t\t\tresult: 0\n\t\t\t};\n\t\t// デフォルト\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n// initStore関数\nexport function initStore(state = initial) {\n\treturn createStore(calcReducer, state,\n\tapplyMiddleware(thunkMiddleware))\n}\n\n\n\n// import { createStore, applyMiddleware } from 'redux';\n// import thunkMiddleware from 'redux-thunk';\n\n// // ステート初期値\n// const initial = {\n// \tmessage: 'START',\n// \tcount:0\n// }\n\n// // レデューサー\n// function counterReducer(state = initial, action) {\n// \tswitch (action.type) {\n// \t\tcase 'INCREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'INCREMENT',\n// \t\t\t\tcount: state.count + 1\n// \t\t\t};\n// \t\tcase 'DECREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'DECREMENT',\n// \t\t\t\tcount: state.count - 1\n// \t\t\t};\n// \t\tcase 'RESET':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'RESET',\n// \t\t\t\tcount: initial.count\n// \t\t\t};\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// }\n\n// // initStore関数(redux-store.jsで必要)\n// export function initStore(state = initial) {\n// \treturn createStore(counterReducer, state,\n// \tapplyMiddleware(thunkMiddleware))\n// }\n"]},"metadata":{},"sourceType":"module"}