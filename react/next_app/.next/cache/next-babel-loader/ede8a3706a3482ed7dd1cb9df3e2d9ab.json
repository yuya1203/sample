{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport firebase from \"firebase\"; // Firebaseの初期化\n\nvar config = {\n  apiKey: \"AIzaSyD_UmMwe6ZQxWRaFLEOwypAbO0H64J62XU\",\n  authDomain: \"react-1203-c5cd1.firebaseapp.com\",\n  databaseURL: \"https://react-1203-c5cd1.firebaseio.com\",\n  projectId: \"react-1203-c5cd1\",\n  storageBucket: \"react-1203-c5cd1.appspot.com\",\n  messagingSenderId: \"722657462862\",\n  appId: \"1:722657462862:web:0cd1e68b7fa7617528911f\",\n  measurementId: \"G-50V88BMKMP\"\n};\nvar fireapp;\n\ntry {\n  firebase.initializeApp(config);\n} catch (error) {\n  console.log(error.message);\n}\n\nexport default fireapp; // ステート初期値\n\nvar initial = {}; // レデューサー（ダミー）\n\nfunction fireReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // ダミー\n    case 'TESTACTION':\n      return state;\n    // デフォルト\n\n    default:\n      return state;\n  }\n} // initStore関数\n\n\nexport function initStore() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  return createStore(fireReducer, state, applyMiddleware(thunkMiddleware));\n} // import { createStore, applyMiddleware } from 'redux'\n// import thunkMiddleware from 'redux-thunk'\n// // ステート初期値\n// const initial = {\n// \tmessage: 'START',\n// \tdata: [],\n// \tnumber: [],\n// \tresult:0\n// }\n// // レデューサー\n// function calcReducer(state = initial, action) {\n// \tswitch (action.type) {\n// \t\t// 計算実行\n// \t\tcase 'ENTER':\n// \t\t\tlet data2 = state.data.slice();\n// \t\t\tlet s = action.value;\n// \t\t\tdata2.unshift(s);\n// \t\t\tlet num = s.replace(/[^0-9]/g, \"\");\n// \t\t\tlet number2 = state.number.slice();\n// \t\t\tnumber2.unshift(num);\n// \t\t\tlet result = (state.result * 1) + (num * 1);\n// \t\t\treturn {\n// \t\t\t\tmessage: 'ENTER',\n// \t\t\t\tdata: data2,\n// \t\t\t\tnumber: number2,\n// \t\t\t\tresult: result\n// \t\t\t};\n// \t\t// リセット\n// \t\tcase 'RESET':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'RESET',\n// \t\t\t\tdata: [],\n// \t\t\t\tnumber: [],\n// \t\t\t\tresult: 0\n// \t\t\t};\n// \t\t// デフォルト\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// }\n// // initStore関数\n// export function initStore(state = initial) {\n// \treturn createStore(calcReducer, state,\n// \tapplyMiddleware(thunkMiddleware))\n// }\n// import { createStore, applyMiddleware } from 'redux';\n// import thunkMiddleware from 'redux-thunk';\n// // ステート初期値\n// const initial = {\n// \tmessage: 'START',\n// \tcount:0\n// }\n// // レデューサー\n// function counterReducer(state = initial, action) {\n// \tswitch (action.type) {\n// \t\tcase 'INCREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'INCREMENT',\n// \t\t\t\tcount: state.count + 1\n// \t\t\t};\n// \t\tcase 'DECREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'DECREMENT',\n// \t\t\t\tcount: state.count - 1\n// \t\t\t};\n// \t\tcase 'RESET':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'RESET',\n// \t\t\t\tcount: initial.count\n// \t\t\t};\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// }\n// // initStore関数(redux-store.jsで必要)\n// export function initStore(state = initial) {\n// \treturn createStore(counterReducer, state,\n// \tapplyMiddleware(thunkMiddleware))\n// }","map":{"version":3,"sources":["/Users/user/workspace/javascript/react/next_app/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fireapp","initializeApp","error","console","log","message","initial","fireReducer","state","action","type","initStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,IAAIC,MAAM,GAAG;AACZC,EAAAA,MAAM,EAAE,yCADI;AAEZC,EAAAA,UAAU,EAAE,kCAFA;AAGZC,EAAAA,WAAW,EAAE,yCAHD;AAIZC,EAAAA,SAAS,EAAE,kBAJC;AAKZC,EAAAA,aAAa,EAAE,8BALH;AAMZC,EAAAA,iBAAiB,EAAE,cANP;AAOZC,EAAAA,KAAK,EAAE,2CAPK;AAQZC,EAAAA,aAAa,EAAE;AARH,CAAb;AAWA,IAAIC,OAAJ;;AACA,IAAI;AACHV,EAAAA,QAAQ,CAACW,aAAT,CAAuBV,MAAvB;AACA,CAFD,CAEE,OAAOW,KAAP,EAAc;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACA;;AACD,eAAeL,OAAf,C,CAEA;;AACA,IAAMM,OAAO,GAAG,EAAhB,C,CAGA;;AACA,SAASC,WAAT,GAA8C;AAAA,MAAzBC,KAAyB,uEAAjBF,OAAiB;AAAA,MAARG,MAAQ;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAK,YAAL;AACC,aAAOF,KAAP;AACD;;AACA;AACC,aAAOA,KAAP;AANF;AAQA,C,CAED;;;AACA,OAAO,SAASG,SAAT,GAAoC;AAAA,MAAjBH,KAAiB,uEAATF,OAAS;AAC1C,SAAOnB,WAAW,CAACoB,WAAD,EAAcC,KAAd,EAClBpB,eAAe,CAACC,eAAD,CADG,CAAlB;AAEA,C,CAID;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport firebase from \"firebase\";\n\n// Firebaseの初期化\nvar config = {\n\tapiKey: \"AIzaSyD_UmMwe6ZQxWRaFLEOwypAbO0H64J62XU\",\n\tauthDomain: \"react-1203-c5cd1.firebaseapp.com\",\n\tdatabaseURL: \"https://react-1203-c5cd1.firebaseio.com\",\n\tprojectId: \"react-1203-c5cd1\",\n\tstorageBucket: \"react-1203-c5cd1.appspot.com\",\n\tmessagingSenderId: \"722657462862\",\n\tappId: \"1:722657462862:web:0cd1e68b7fa7617528911f\",\n\tmeasurementId: \"G-50V88BMKMP\"\n};\n\nvar fireapp;\ntry {\n\tfirebase.initializeApp(config);\n} catch (error) {\n\tconsole.log(error.message);\n}\nexport default fireapp;\n\n// ステート初期値\nconst initial = {\n}\n\n// レデューサー（ダミー）\nfunction fireReducer(state = initial, action) {\n\tswitch (action.type) {\n\t\t// ダミー\n\t\tcase 'TESTACTION':\n\t\t\treturn state;\n\t\t// デフォルト\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n// initStore関数\nexport function initStore(state = initial) {\n\treturn createStore(fireReducer, state,\n\tapplyMiddleware(thunkMiddleware))\n}\n\n\n\n// import { createStore, applyMiddleware } from 'redux'\n// import thunkMiddleware from 'redux-thunk'\n\n// // ステート初期値\n// const initial = {\n// \tmessage: 'START',\n// \tdata: [],\n// \tnumber: [],\n// \tresult:0\n// }\n\n// // レデューサー\n// function calcReducer(state = initial, action) {\n// \tswitch (action.type) {\n// \t\t// 計算実行\n// \t\tcase 'ENTER':\n// \t\t\tlet data2 = state.data.slice();\n// \t\t\tlet s = action.value;\n// \t\t\tdata2.unshift(s);\n// \t\t\tlet num = s.replace(/[^0-9]/g, \"\");\n// \t\t\tlet number2 = state.number.slice();\n// \t\t\tnumber2.unshift(num);\n// \t\t\tlet result = (state.result * 1) + (num * 1);\n// \t\t\treturn {\n// \t\t\t\tmessage: 'ENTER',\n// \t\t\t\tdata: data2,\n// \t\t\t\tnumber: number2,\n// \t\t\t\tresult: result\n// \t\t\t};\n// \t\t// リセット\n// \t\tcase 'RESET':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'RESET',\n// \t\t\t\tdata: [],\n// \t\t\t\tnumber: [],\n// \t\t\t\tresult: 0\n// \t\t\t};\n// \t\t// デフォルト\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// }\n\n// // initStore関数\n// export function initStore(state = initial) {\n// \treturn createStore(calcReducer, state,\n// \tapplyMiddleware(thunkMiddleware))\n// }\n\n\n\n// import { createStore, applyMiddleware } from 'redux';\n// import thunkMiddleware from 'redux-thunk';\n\n// // ステート初期値\n// const initial = {\n// \tmessage: 'START',\n// \tcount:0\n// }\n\n// // レデューサー\n// function counterReducer(state = initial, action) {\n// \tswitch (action.type) {\n// \t\tcase 'INCREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'INCREMENT',\n// \t\t\t\tcount: state.count + 1\n// \t\t\t};\n// \t\tcase 'DECREMENT':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'DECREMENT',\n// \t\t\t\tcount: state.count - 1\n// \t\t\t};\n// \t\tcase 'RESET':\n// \t\t\treturn {\n// \t\t\t\tmessage: 'RESET',\n// \t\t\t\tcount: initial.count\n// \t\t\t};\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// }\n\n// // initStore関数(redux-store.jsで必要)\n// export function initStore(state = initial) {\n// \treturn createStore(counterReducer, state,\n// \tapplyMiddleware(thunkMiddleware))\n// }\n"]},"metadata":{},"sourceType":"module"}